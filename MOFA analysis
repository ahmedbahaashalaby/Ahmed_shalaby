# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
BiocManager::install("MOFA2",force = TRUE)
BiocManager::install("MOFAdata", force = TRUE)
BiocManager::install("basilisk",force = TRUE) 
setwd(D:/r project 2/colon)

library(MOFA2)
library(basilisk) 
library(MOFAdata)
library(data.table)
library(ggplot2)
#library(tidyverse)
#library(devtools)
#devtools::install_github("rstudio/reticulate")
#py_install("mofapy2", envname = "r-reticulate", method="auto", pip=T)
#use_condaenv 
#install.packages("data.table") 
library("data.table")

#write.csv(as.matrix(exp),file="expression.csv", quote=F,row.names=T)

setwd("D:/r project 2") 
getwd()

#creat MOFA opject  
colondata <- make_example_data(
  n_views = 2, 
  n_samples = 550, 
  n_features = 2500, 
  n_factors = 10
)[[1]]

lapply(colondata,dim)
names(colondata)<-c("exp","miRNA_final") 
#expression <- fread("D:/r project 2/exp_final.csv")  
#mirna <- fread("D:/r project 2/miRNAfinal.csv")  
load("C:/Users/drahm/Downloads/bolbol.RData") 
load("D:/r project 2/coln.RData")   
#load("D:/r project 2/miRNAfinal.csv")  
#miRNA_final <- read.delim("D:/r project 2/miRNAfinal221.csv",sep = "",header = T,row.names = 1)
#RawData <- read.delim("D:/r project 2/miRNAfinal.csv",sep = "",header = T,row.names = 1)
#metadata = read.csv("D:/r project 2/metadata1.csv")  
metadata = read.csv("D:/r project 2/coln1.csv") 


#write.csv(as.matrix(exp),file="expfinal.csv", quote=F,row.names=T)
View(miRNA_final)
dim(miRNA_final)  
dim(metadata) 

#read_csv = read.csv("D:/r project 2/metadata1.csv") 

miRNA_final=miRNA_final.values
colondata[["exp"]]= data.matrix(exp) 
colondata[["miRNA_final"]]= data.matrix(miRNA_final.values) 
colondata[is.na(colondata)] <- 0 
colon_metadata[is.na(colon_metadata)] <- 0
#data("CLL_data")
#colon_metadata <- fread("D:/r project 2/clinical/clinical/colon") 
#colon_metadata[is.na(colon_metadata)] <- 0 
#load("C:/Users/drahm/Downloads/bolbol.RData")
#write.csv(as.matrix(nm1),file="final1.csv", quote=F,row.names=T) 
#nm1 <- intersect(names(expression), names(mirna))
#mirna[nm1]
#expression[nm2] 
dim(miRNA_final) 
dim(exp) 



MOFAobject <- create_mofa(colondata)
MOFAobject 


#overview of training data ## The rows are the different views and columns are samples. Missing values are indicated by a grey bar.
plot_data_overview(MOFAobject)

#Fit the MOFA mode
#Define options
data_opts <- get_default_data_options(MOFAobject)
data_opts
data_opts$scale_views=FALSE

#Define model options
model_opts <- get_default_model_options(MOFAobject)
model_opts$likelihoods 
hist(metadata)

#Define training options
train_opts <- get_default_training_options(MOFAobject)
train_opts$convergence_mode="slow"
train_opts$seed <- 100
#TrainOptions$tolerance=0.01

#prepareMOFA internally performs a set of sanity checks and fills the DataOptions, TrainOptions and ModelOptions slots of the MOFAobject
MOFAobject <- prepare_mofa(
  object = MOFAobject,
  data_options = data_opts,
  model_options = model_opts,
  training_options = train_opts
)

#Run MOFA This step can take some time (around 15 min with default parameters
MOFAobject <- run_mofa(MOFAobject,use_basilisk = TRUE  )
#Add sample metadata to the model   
#filepath <- system.file("extdata", "model.hdf5", package = "MOFA2")
#MOFAobject <- load_model(filepath)
#Nsamples = sum(get_dimensions(MOFAobject)[["N"]])  
row_names = chartr("-",".",row.names(MOFAobject))

Nsamples = sum(MOFAobject@dimensions$N)
MetaData_MOFA <- data.frame(
sample = samples_names(MOFAobject)[[1]],
vital_status = sample(c("LIVING","DECEASED"), size = Nsamples, replace = TRUE)
)   

exp = read.csv("D:\r project 2\expression.csv",header = T , row.names = 1,sep= " ")
mirna = read.csv("D:\r project 2\miRNAfinal.csv",header = T , row.names = 1,sep= " ")

df_exp = data.frame(gene=row.names(exp),class="exp")
df_mirna = data.frame(gene = row.names(miRNA_final),class = "mirna")

final = rbind(df_exp, df_mirna) 



exp_genes = data.frame(exp$X)
mirna_genes = data.frame(miRNA_final$X) 
final_genes = data.frame(rbind(c(exp_genes$exp.X,mirna_genes$miRNA_final.X))) 
final_genes <- c(mirna_genes,exp_genes)
features_metadata(MOFAobject)<-(final_genes)


#row_names = chartr("-",".",row.names(metadata)) 


dim(MOFAobject)
samples_metadata(MOFAobject) <- MetaData_MOFA 
features_metadata(MOFAobject)
#head(samples_metadata(model), n=3)

#file <- system.file("extdata", "model.hdf5", package = "MOFA2") 
#model <- load_model(file) 
#Nsamples = sum(get_dimensions(model)[["N"]])
#CIMP.H   CIMP.L Cluster3 Cluster4
#samples_metadata(model) 
#age = sample(1:99, size = Nsamples, replace = TRUE) 
#sum(model@dimensions$N 
#dim(MOFAobject)  
#as.matrix(colon_metadata)

#samples_metadata(MOFAobject) <- colon_metadata sample = samples_names(model)[[1]]

#MetaData_MOFA <- read.delim("D:/r project 2/clinical/clinical/colon" ,sep = "\t" ,header = T)
#Annotation_MOFA <- data.frame(sample)
#v <- c(1:100)
#Annotation_MOFA$number <- v

#MetaData_MOFA$sampleID <- gsub("-",".", MetaData_MOFA$sampleID)

#Annotation1_MOFA <- merge(MetaData_MOFA, Annotation_MOFA, by.x = "sampleID", by.y = "sample")


#Correlation between factors
plot_factor_cor(MOFAobject)


#Analyse a trained MOFA model 
#Disentangling the heterogeneity: calculation of variance explained by each factor in each view
# Calculate the variance explained (R2) per factor in each view 
r2 <- get_variance_explained(MOFAobject)
r2$r2_total

# Variance explained by each factor in each view
head(r2$r2_per_factor)

# Plot it
plot_variance_explained(MOFAobject) 


#Letâ€™s test the association between MOFA Factors , survival outcome (dead vs alive) and age:
#plot_variance_explained(model, x="group", y="factor", plot_total = T)[[2]]

plot_factor(MOFAobject, 
            factor = 1:3,
            
) 

#Scatter plots 
#install.packages("GGally") 

library(GGally)

plot_factors(MOFAobject, 
             factors = 1:3,
)  
# Number of features to highlight 
# Scale weights from -1 to 1
# Take the absolute value
plot_weights(MOFAobject,
             view = "miRNA_final",
             factor = 1,
             nfeatures = 10,
             scale = TRUE,        
             abs = FALSE             
) 
#top weights in plots 
plot_top_weights(MOFAobject,
                 view = "miRNA_final",
                 factor = 1,
                 nfeatures = 10
) 
#HeatMaps 
plot_data_heatmap(MOFAobject,
                  view = "miRNA_final",         # view of interest
                  factor = 1,             # factor of interest
                  features = 20,
) 

#Ordination of samples by factors to reveal clusters and gradients in the sample space
plot_data_scatter(
  MOFAobject,
  factor = 1,
     
)

#Non-linear dimensionality reduction 
set.seed(42)
model <- run_umap(MOFAobject)
model <- run_tsne(MOFAobject) 

#plot 
plot_dimred(model,
            method = "TSNE",  # method can be either "TSNE" or "UMAP"
            dot_size = 1 ,
            color_by = "vital_status"
)



views_names(model) <- c("Transcriptomics", "mirna") 
factors_names(model) <- paste("Factor", 1:get_dimensions(model)$K, sep=" ") 
views_names(model) 




#Factors extracting 

factors <- get_factors(model, factors = "all")
lapply(factors,dim) 

#Extract weights 
weights <- get_weights(model, views = "all", factors = "all")
lapply(weights,dim)  

data <- get_data(model)
lapply(data, function(x) lapply(x, dim))[[1]]  

#For convenience, the user can extract the data in long data.frame format
factors <- get_factors(model, as.data.frame = TRUE)
head(factors, n=3) 
weights <- get_weights(model, as.data.frame = TRUE)
head(weights, n=3)


#Feature set enrichment analysis in the active views
# Load reactome annotations
data("reactomeGS") # binary matrix with feature sets in rows and features in columns
# C2: curated gene sets from online pathway databases, publications in PubMed, and knowledge of domain experts.
data("MSigDB_v6.0_C2_human") 
head(rownames(MSigDB_v6.0_C2_human), n=3)
# C5: extracted from the Gene Ontology data.base
data("MSigDB_v6.0_C5_human") 
head(rownames(MSigDB_v6.0_C5_human), n=3)

# perform enrichment analysis
gsea <- run_enrichment( MOFAobject,
  view = "miRNA_final",
  feature.sets = reactomeGS,
  alpha = 0.01)  
enrichment.parametric <- run_enrichment(model,
                                        view = "Transcriptomics", factors = 1:3,
                                        feature.sets = reactomeGS,
                                        sign = "negative",
                                        statistical.test = "parametric"
)

enrichment.parametric <- run_enrichment(model,
  view = "RNA", factors = 1:3,
  feature.sets = MSigDB_v6.0_C5_mouse,
  sign = "negative",
  statistical.test = "parametric"
)

# GSEA on positive weights, with default options
res.positive <- run_enrichment(MOFAobject, 
                               feature.sets = reactomeGS, 
                               view = "mRNA",
                               sign = "positive")

# GSEA on negative weights, with default options
res.negative <- run_enrichment(MOFAobject, 
                               feature.sets = reactomeGS, 
                               view = "mRNA",
                               sign = "negative")

#The next step is to visualise the results of the Gene Set Enrichment Analysis.
#Plot the number of enriched gene sets per factor
plot_enrichment_heatmap(gsea)
plot_enrichment(gsea, factor = 4, max.pathways = 15)

#To look into which gene sets these are
plot_enrichment_detailed(
  enrichment.results = gsea,
  factor = 5, 
  max.pathways = 3
) 

#Feature set enrichment analysis in the active views
# Load reactome annotations

data("reactomeGS")
H <- msigdbr(species = "Homo sapiens", category = "H")
str(H)
# perform enrichment analysis
gsea <- run_enrichment(
  MOFAobject,
  view = "mirna",
  feature.sets=H,
  alpha = 0.01
)

#The next step is to visualise the results of the Gene Set Enrichment Analysis.
#Plot the number of enriched gene sets per factor
plot_enrichment(gsea, alpha=0.01)

#To look into which gene sets these are we can choose a factor of interest and visualize the most enriched gene sets
#Plot the top enriched pathways for every factor
#########################
interestingFactors <- 7:8

fseaplots <- lapply(interestingFactors, function(factor) {
  plot_enrichment_detailed(
    model,
    gsea,
    factor = factor,
    alpha = 0.01,
    max.pathways = 10 # The top number of pathways to display
  )
})

cowplot::plot_grid(fseaplots[[1]], fseaplots[[2]],
                   ncol = 1, labels = paste("Factor", interestingFactors))

#Ordination of samples by factors to reveal clusters and gradients in the sample space
plot_data_scatter(
  MOFAobject,
  factors = 1:2,
  color_by = "IGHV",      # color by the IGHV values that are part of the training data
  shape_by = "del13q14_"  # shape by the trisomy12 values that are part of the training data
)

#An overview of pair-wise sctterplots for all or a subset of factors is produced by the plotFactorScatters function
plotFactorScatters(
  MOFAobject,
  factors = 1:3,
  color_by = "IGHV"
)


#A single factor can be visualised using the plotFactorBeeswarm function
plotFactorBeeswarm(
  MOFAobject,
  factors = 6,
  color_by = "IGHV" 
) 


data("reactomeGS")

enrichment.parametric <- run_enrichment(model,
                                        view = "mirna", factors = 1:3,
                                        feature.sets = reactomeGS,
                                        sign = "negative",
                                        statistical.test = "parametric" 
) 
enrichment.parametric <- run_enrichment(model,
                                        view = "mirna", factors = 1:3,
                                        feature.sets = MSigDB_v6.0_C5_human,
                                        sign = "negative",
                                        statistical.test = "parametric"
)

                                        
